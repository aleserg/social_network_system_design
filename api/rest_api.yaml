openapi: 3.0.3
info:
  title: VK OpenAPI
  version: 1.0.0
servers:
- url: http://vk.com
tags:
  - name: user
    description: Operations about user
paths:
  /friends/id{user_id}&Token={auth_token}:
    get:
      tags:
        - user
      summary: Get a list of friends of user
      operationId: getUserFriends
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      responses:
        '200':
          description: Successful response with friends list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friends"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /friends/id{user_id}&FriendId={friend_id}&Token={auth_token}:
    post:
      tags:
        - user
      summary: Add new user to a friends list
      operationId: addFriend
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: friend_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      responses:
        '200':
          description: Successful response with added friend userId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserId"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Add new user to a friends list
      operationId: deleteFriend
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: friend_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      responses:
        '200':
          description: Successful response with deleted friend userId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserId"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
  /profile/id{user_id}&Token={auth_token}:
    get:
      tags:
        - user
      summary: Get a user profile
      operationId: getUserProfile
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      responses:
        '200':
          description: Successful response with user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /timeline/id{user_id}&Token={auth_token}:
    get:
      tags:
        - user
      summary: Get user timeline
      operationId: getUserTimeline
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      responses:
        '200':
          description: Successful response with user timeline
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Timeline"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - user
      summary: Add a post to user timeline
      operationId: addPostToUserTimeline
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostData"
      responses:
        '200':
          description: Successful response with added post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error" 
  /media/id{user_id}&Token={auth_token}:
    post:
      tags:
        - user
      summary: Add a post to user timeline
      operationId: addMedia
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: array
                  items: 
                    $ref: "#/components/schemas/MediaFile"
      responses:
        '200':
          description: Successful response with reference list to added media files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Links"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /messages/id{user_id}&DialogType={dialog_type}&Id={dest_id}&BeginMsgId={msg_id}&Token={auth_token}:
    get:
      tags:
        - user
      summary: Get messages from user/user group dialog
      operationId: getMessages
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: dialog_type
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/DialogType"
       - name: dest_id
         in: path
         required: true
         description: dialog_type ID
         schema:
           $ref: "#/components/schemas/Id"
       - name: msg_id
         in: path
         required: true
         description: first message ID
         schema:
           $ref: "#/components/schemas/Id"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      responses:
        '200':
          description: Successful response with requested messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostList"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"   
                
  /messages/id{user_id}&DialogType={dialog_type}&Id={dest_id}&Token={auth_token}:
    post:
      tags:
        - user
      summary: Send a message to user/user group
      operationId: sendMessage
      parameters: 
       - name: user_id
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/UserId"
       - name: dialog_type
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/DialogType"
       - name: dest_id
         in: path
         required: true
         description: dialog_type ID
         schema:
           $ref: "#/components/schemas/Id"
       - name: auth_token
         in: path
         required: true
         schema:
           $ref: "#/components/schemas/AuthToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostData"
      responses:
        '200':
          description: Successful response with sent message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        'default':
          description: Some error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"   
components:
  schemas:
    Error:
      required:
        - code
        - description
      properties:
        code:
         type: integer
         format: int64
         example: 1
        description:
         type: string
         example: Object not found
    AuthToken:
      type: string
      example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NSIsIm5hbWUiOiJKb2huIEdvbGQiLCJhZG1pbiI6dHJ1ZX0K.LIHjWCBORSWMEibq-tnT8ue_deUqZx1K0XxCOXZRrBI
    AuthFields:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: login123
        password:
          type: string
          example: qwerty12345
     
    Id: 
      type: integer
      format: int64
      example: 169697570
    UserId:
      allOf:
        - $ref: "#/components/schemas/Id"
    Friends:
      type: array
      items: 
        $ref: "#/components/schemas/UserId"
    Link:
      type: string
      example: image-46453123_457262361
    Links:
      type: array
      items:
        $ref: "#/components/schemas/Link"
    DialogType:
      type: string
      enum:
       - user
       - chat
    Date:
      type: string 
      example: 25.05.2015
    MediaFile:
      type: object
      required:
       - type
       - data
      properties:
        type:
          type: string #Maybe should add enums
          example: png
        data:
          type: array
          items: {}
    PostData:
      type: object
      required:
       - message
       - media
      properties:
        message:
         type: string
         example: hello world
        media:
         type: array
         items:
           $ref: "#/components/schemas/Link"
    Post:
      type: object
      required:
       - id
       - handlerId
       - date
       - postData
      properties:
        id:
         allOf:
           - $ref: "#/components/schemas/Id"
        handlerId:
         allOf:
           - $ref: "#/components/schemas/UserId"
        date:
         allOf:
           - $ref: "#/components/schemas/Date"
        postData:
         allOf:
           - $ref: "#/components/schemas/PostData"
    PostList:
      type: array
      items:
        $ref: "#/components/schemas/Post"
    Timeline:
      type: array
      items:
        $ref: "#/components/schemas/Post"
    User:
      type: object
      required:
         - id
         - first_name
         - last_name
         - regDate
         - friends
         - timeline
      properties:
        id:
         allOf:
           - $ref: "#/components/schemas/UserId"
        first_name:
         type: string
         example: "John"
        last_name:
         type: string
         example: "Smith"
        regDate:
         allOf:
           - $ref: "#/components/schemas/UserId"
        friends:
         allOf:
           - $ref: "#/components/schemas/Friends"
        timeline:
         allOf:
           - $ref: "#/components/schemas/Timeline"

         